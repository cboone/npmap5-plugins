(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.ArcGisRestSource = factory());
})(this, (function () { 'use strict';

  /* @preserve
  * @terraformer/arcgis - v2.1.1 - MIT
  * Copyright (c) 2012-2022 Environmental Systems Research Institute, Inc.
  * Tue Aug 02 2022 14:23:48 GMT-0700 (Pacific Daylight Time)
  */
  /* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.
   * Apache-2.0 */

  var edgeIntersectsEdge = function edgeIntersectsEdge(a1, a2, b1, b2) {
    var uaT = (b2[0] - b1[0]) * (a1[1] - b1[1]) - (b2[1] - b1[1]) * (a1[0] - b1[0]);
    var ubT = (a2[0] - a1[0]) * (a1[1] - b1[1]) - (a2[1] - a1[1]) * (a1[0] - b1[0]);
    var uB = (b2[1] - b1[1]) * (a2[0] - a1[0]) - (b2[0] - b1[0]) * (a2[1] - a1[1]);

    if (uB !== 0) {
      var ua = uaT / uB;
      var ub = ubT / uB;

      if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
        return true;
      }
    }

    return false;
  };
  var coordinatesContainPoint = function coordinatesContainPoint(coordinates, point) {
    var contains = false;

    for (var i = -1, l = coordinates.length, j = l - 1; ++i < l; j = i) {
      if ((coordinates[i][1] <= point[1] && point[1] < coordinates[j][1] || coordinates[j][1] <= point[1] && point[1] < coordinates[i][1]) && point[0] < (coordinates[j][0] - coordinates[i][0]) * (point[1] - coordinates[i][1]) / (coordinates[j][1] - coordinates[i][1]) + coordinates[i][0]) {
        contains = !contains;
      }
    }

    return contains;
  };
  var pointsEqual = function pointsEqual(a, b) {
    for (var i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) {
        return false;
      }
    }

    return true;
  };
  var arrayIntersectsArray = function arrayIntersectsArray(a, b) {
    for (var i = 0; i < a.length - 1; i++) {
      for (var j = 0; j < b.length - 1; j++) {
        if (edgeIntersectsEdge(a[i], a[i + 1], b[j], b[j + 1])) {
          return true;
        }
      }
    }

    return false;
  };

  /* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.
   * Apache-2.0 */

  var closeRing = function closeRing(coordinates) {
    if (!pointsEqual(coordinates[0], coordinates[coordinates.length - 1])) {
      coordinates.push(coordinates[0]);
    }

    return coordinates;
  }; // determine if polygon ring coordinates are clockwise. clockwise signifies outer ring, counter-clockwise an inner ring
  // or hole. this logic was found at http://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-
  // points-are-in-clockwise-order

  var ringIsClockwise = function ringIsClockwise(ringToTest) {
    var total = 0;
    var i = 0;
    var rLength = ringToTest.length;
    var pt1 = ringToTest[i];
    var pt2;

    for (i; i < rLength - 1; i++) {
      pt2 = ringToTest[i + 1];
      total += (pt2[0] - pt1[0]) * (pt2[1] + pt1[1]);
      pt1 = pt2;
    }

    return total >= 0;
  }; // This function ensures that rings are oriented in the right directions
  // from http://jsperf.com/cloning-an-object/2

  var shallowClone = function shallowClone(obj) {
    var target = {};

    for (var i in obj) {
      // both arcgis attributes and geojson props are just hardcoded keys
      if (obj.hasOwnProperty(i)) {
        // eslint-disable-line no-prototype-builtins
        target[i] = obj[i];
      }
    }

    return target;
  };

  /* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.
   * Apache-2.0 */

  var coordinatesContainCoordinates = function coordinatesContainCoordinates(outer, inner) {
    var intersects = arrayIntersectsArray(outer, inner);
    var contains = coordinatesContainPoint(outer, inner[0]);

    if (!intersects && contains) {
      return true;
    }

    return false;
  }; // do any polygons in this array contain any other polygons in this array?
  // used for checking for holes in arcgis rings


  var convertRingsToGeoJSON = function convertRingsToGeoJSON(rings) {
    var outerRings = [];
    var holes = [];
    var x; // iterator

    var outerRing; // current outer ring being evaluated

    var hole; // current hole being evaluated
    // for each ring

    for (var r = 0; r < rings.length; r++) {
      var ring = closeRing(rings[r].slice(0));

      if (ring.length < 4) {
        continue;
      } // is this ring an outer ring? is it clockwise?


      if (ringIsClockwise(ring)) {
        var polygon = [ring.slice().reverse()]; // wind outer rings counterclockwise for RFC 7946 compliance

        outerRings.push(polygon); // push to outer rings
      } else {
        holes.push(ring.slice().reverse()); // wind inner rings clockwise for RFC 7946 compliance
      }
    }

    var uncontainedHoles = []; // while there are holes left...

    while (holes.length) {
      // pop a hole off out stack
      hole = holes.pop(); // loop over all outer rings and see if they contain our hole.

      var contained = false;

      for (x = outerRings.length - 1; x >= 0; x--) {
        outerRing = outerRings[x][0];

        if (coordinatesContainCoordinates(outerRing, hole)) {
          // the hole is contained push it into our polygon
          outerRings[x].push(hole);
          contained = true;
          break;
        }
      } // ring is not contained in any outer ring
      // sometimes this happens https://github.com/Esri/esri-leaflet/issues/320


      if (!contained) {
        uncontainedHoles.push(hole);
      }
    } // if we couldn't match any holes using contains we can try intersects...


    while (uncontainedHoles.length) {
      // pop a hole off out stack
      hole = uncontainedHoles.pop(); // loop over all outer rings and see if any intersect our hole.

      var intersects = false;

      for (x = outerRings.length - 1; x >= 0; x--) {
        outerRing = outerRings[x][0];

        if (arrayIntersectsArray(outerRing, hole)) {
          // the hole is contained push it into our polygon
          outerRings[x].push(hole);
          intersects = true;
          break;
        }
      }

      if (!intersects) {
        outerRings.push([hole.reverse()]);
      }
    }

    if (outerRings.length === 1) {
      return {
        type: 'Polygon',
        coordinates: outerRings[0]
      };
    } else {
      return {
        type: 'MultiPolygon',
        coordinates: outerRings
      };
    }
  };

  var getId = function getId(attributes, idAttribute) {
    var keys = idAttribute ? [idAttribute, 'OBJECTID', 'FID'] : ['OBJECTID', 'FID'];

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key in attributes && (typeof attributes[key] === 'string' || typeof attributes[key] === 'number')) {
        return attributes[key];
      }
    }

    throw Error('No valid id attribute found');
  };

  var arcgisToGeoJSON = function arcgisToGeoJSON(arcgis, idAttribute) {
    var geojson = {};

    if (arcgis.features) {
      geojson.type = 'FeatureCollection';
      geojson.features = [];

      for (var i = 0; i < arcgis.features.length; i++) {
        geojson.features.push(arcgisToGeoJSON(arcgis.features[i], idAttribute));
      }
    }

    if (typeof arcgis.x === 'number' && typeof arcgis.y === 'number') {
      geojson.type = 'Point';
      geojson.coordinates = [arcgis.x, arcgis.y];

      if (typeof arcgis.z === 'number') {
        geojson.coordinates.push(arcgis.z);
      }
    }

    if (arcgis.points) {
      geojson.type = 'MultiPoint';
      geojson.coordinates = arcgis.points.slice(0);
    }

    if (arcgis.paths) {
      if (arcgis.paths.length === 1) {
        geojson.type = 'LineString';
        geojson.coordinates = arcgis.paths[0].slice(0);
      } else {
        geojson.type = 'MultiLineString';
        geojson.coordinates = arcgis.paths.slice(0);
      }
    }

    if (arcgis.rings) {
      geojson = convertRingsToGeoJSON(arcgis.rings.slice(0));
    }

    if (typeof arcgis.xmin === 'number' && typeof arcgis.ymin === 'number' && typeof arcgis.xmax === 'number' && typeof arcgis.ymax === 'number') {
      geojson.type = 'Polygon';
      geojson.coordinates = [[[arcgis.xmax, arcgis.ymax], [arcgis.xmin, arcgis.ymax], [arcgis.xmin, arcgis.ymin], [arcgis.xmax, arcgis.ymin], [arcgis.xmax, arcgis.ymax]]];
    }

    if (arcgis.geometry || arcgis.attributes) {
      geojson.type = 'Feature';
      geojson.geometry = arcgis.geometry ? arcgisToGeoJSON(arcgis.geometry) : null;
      geojson.properties = arcgis.attributes ? shallowClone(arcgis.attributes) : null;

      if (arcgis.attributes) {
        try {
          geojson.id = getId(arcgis.attributes, idAttribute);
        } catch (err) {// don't set an id
        }
      }
    } // if no valid geometry was encountered


    if (JSON.stringify(geojson.geometry) === JSON.stringify({})) {
      geojson.geometry = null;
    }

    if (arcgis.spatialReference && arcgis.spatialReference.wkid && arcgis.spatialReference.wkid !== 4326) {
      console.warn('Object converted in non-standard crs - ' + JSON.stringify(arcgis.spatialReference));
    }

    return geojson;
  };

  /* Copyright (c) 2012-2019 Environmental Systems Research Institute, Inc.
   * Apache-2.0 */
  // outer rings are clockwise, holes are counterclockwise
  // used for converting GeoJSON Polygons to ArcGIS Polygons

  var orientRings = function orientRings(poly) {
    var output = [];
    var polygon = poly.slice(0);
    var outerRing = closeRing(polygon.shift().slice(0));

    if (outerRing.length >= 4) {
      if (!ringIsClockwise(outerRing)) {
        outerRing.reverse();
      }

      output.push(outerRing);

      for (var i = 0; i < polygon.length; i++) {
        var hole = closeRing(polygon[i].slice(0));

        if (hole.length >= 4) {
          if (ringIsClockwise(hole)) {
            hole.reverse();
          }

          output.push(hole);
        }
      }
    }

    return output;
  }; // This function flattens holes in multipolygons to one array of polygons
  // used for converting GeoJSON Polygons to ArcGIS Polygons


  var flattenMultiPolygonRings = function flattenMultiPolygonRings(rings) {
    var output = [];

    for (var i = 0; i < rings.length; i++) {
      var polygon = orientRings(rings[i]);

      for (var x = polygon.length - 1; x >= 0; x--) {
        var ring = polygon[x].slice(0);
        output.push(ring);
      }
    }

    return output;
  };

  var geojsonToArcGIS = function geojsonToArcGIS(geojson, idAttribute) {
    idAttribute = idAttribute || 'OBJECTID';
    var spatialReference = {
      wkid: 4326
    };
    var result = {};
    var i;

    switch (geojson.type) {
      case 'Point':
        result.x = geojson.coordinates[0];
        result.y = geojson.coordinates[1];

        if (geojson.coordinates[2] != null) {
          result.z = geojson.coordinates[2];
        }

        result.spatialReference = spatialReference;
        break;

      case 'MultiPoint':
        result.points = geojson.coordinates.slice(0);

        if (geojson.coordinates[0][2] != null) {
          result.hasZ = true;
        }

        result.spatialReference = spatialReference;
        break;

      case 'LineString':
        result.paths = [geojson.coordinates.slice(0)];

        if (geojson.coordinates[0][2] != null) {
          result.hasZ = true;
        }

        result.spatialReference = spatialReference;
        break;

      case 'MultiLineString':
        result.paths = geojson.coordinates.slice(0);

        if (geojson.coordinates[0][0][2] != null) {
          result.hasZ = true;
        }

        result.spatialReference = spatialReference;
        break;

      case 'Polygon':
        result.rings = orientRings(geojson.coordinates.slice(0));

        if (geojson.coordinates[0][0][2] != null) {
          result.hasZ = true;
        }

        result.spatialReference = spatialReference;
        break;

      case 'MultiPolygon':
        result.rings = flattenMultiPolygonRings(geojson.coordinates.slice(0));

        if (geojson.coordinates[0][0][0][2] != null) {
          result.hasZ = true;
        }

        result.spatialReference = spatialReference;
        break;

      case 'Feature':
        if (geojson.geometry) {
          result.geometry = geojsonToArcGIS(geojson.geometry, idAttribute);
        }

        result.attributes = geojson.properties ? shallowClone(geojson.properties) : {};

        if (geojson.id) {
          result.attributes[idAttribute] = geojson.id;
        }

        break;

      case 'FeatureCollection':
        result = [];

        for (i = 0; i < geojson.features.length; i++) {
          result.push(geojsonToArcGIS(geojson.features[i], idAttribute));
        }

        break;

      case 'GeometryCollection':
        result = [];

        for (i = 0; i < geojson.geometries.length; i++) {
          result.push(geojsonToArcGIS(geojson.geometries[i], idAttribute));
        }

        break;
    }

    return result;
  };

  var WorkerClass = null;

  try {
      var WorkerThreads =
          typeof module !== 'undefined' && typeof module.require === 'function' && module.require('worker_threads') ||
          typeof __non_webpack_require__ === 'function' && __non_webpack_require__('worker_threads') ||
          typeof require === 'function' && require('worker_threads');
      WorkerClass = WorkerThreads.Worker;
  } catch(e) {} // eslint-disable-line

  function decodeBase64$1(base64, enableUnicode) {
      return Buffer.from(base64, 'base64').toString(enableUnicode ? 'utf16' : 'utf8');
  }

  function createBase64WorkerFactory$2(base64, sourcemapArg, enableUnicodeArg) {
      var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
      var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
      var source = decodeBase64$1(base64, enableUnicode);
      var start = source.indexOf('\n', 10) + 1;
      var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
      return function WorkerFactory(options) {
          return new WorkerClass(body, Object.assign({}, options, { eval: true }));
      };
  }

  function decodeBase64(base64, enableUnicode) {
      var binaryString = atob(base64);
      if (enableUnicode) {
          var binaryView = new Uint8Array(binaryString.length);
          for (var i = 0, n = binaryString.length; i < n; ++i) {
              binaryView[i] = binaryString.charCodeAt(i);
          }
          return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));
      }
      return binaryString;
  }

  function createURL(base64, sourcemapArg, enableUnicodeArg) {
      var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
      var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
      var source = decodeBase64(base64, enableUnicode);
      var start = source.indexOf('\n', 10) + 1;
      var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
      var blob = new Blob([body], { type: 'application/javascript' });
      return URL.createObjectURL(blob);
  }

  function createBase64WorkerFactory$1(base64, sourcemapArg, enableUnicodeArg) {
      var url;
      return function WorkerFactory(options) {
          url = url || createURL(base64, sourcemapArg, enableUnicodeArg);
          return new Worker(url, options);
      };
  }

  var kIsNodeJS = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';

  function isNodeJS() {
      return kIsNodeJS;
  }

  function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
      if (isNodeJS()) {
          return createBase64WorkerFactory$2(base64, sourcemapArg, enableUnicodeArg);
      }
      return createBase64WorkerFactory$1(base64, sourcemapArg, enableUnicodeArg);
  }

  var WorkerFactory = createBase64WorkerFactory('', null, false);
  /* eslint-enable */

  const earthCircumference = 40075016.68557849;
  /**
    * Converts a webmercator x,y to WGS84 lng,lat
    * @param x
    * @param y
    * @returns LngLngLike
    */
  function toWGS84(x, y) {
      // Convert the lat lng
      const wgsLng = x * 180 / (earthCircumference / 2);
      // thanks magichim @ github for the correction
      const wgsLat = Math.atan(Math.exp(y * Math.PI / (earthCircumference / 2))) * 360 / Math.PI - 90;
      return { lng: wgsLng, lat: wgsLat };
  }
  ;
  /**
   * Converts a WGS84 lng,lat to webmercator x,y
   * @param lng
   * @param lat
   * @returns {x: number, y: number}
   */
  function fromWGS84(lng, lat) {
      // Calculate the web mercator X and Y
      // https://gist.github.com/onderaltintas/6649521
      const wmx = lng * (earthCircumference / 2) / 180;
      let wmy = Math.log(Math.tan((90 + lat) * Math.PI / 360)) / (Math.PI / 180);
      wmy = wmy * (earthCircumference / 2) / 180;
      return { x: wmx, y: wmy };
  }
  ;
  /**
   * Takes a zoom, returns WebMercator Meters Per Pixel
   * Adapted from: https://github.com/mapbox/postgis-vt-util/blob/master/src/ZRes.sql
   * @param zoom
   * @param tileSize is optional, default is 256 (for 256x256 tiles)
   * @returns number
   */
  function metersPerPixel(zoom, tileSize = 256) {
      return earthCircumference / (tileSize * (1 << zoom));
  }

  const webMercatorCodes = ['102100', '900913', '3857', '3587', '54004', '41001', '102113', '3785'];
  function getEsriBoundingBox(lngLatBbox) {
      const sw = [Math.min(lngLatBbox[0], lngLatBbox[2]), Math.min(lngLatBbox[1], lngLatBbox[3])];
      const ne = [Math.max(lngLatBbox[0], lngLatBbox[2]), Math.max(lngLatBbox[1], lngLatBbox[3])];
      let swXY = fromWGS84(sw[0], sw[1]);
      let neXY = fromWGS84(ne[0], ne[1]);
      return {
          'type': 'extent',
          'xmin': swXY.x,
          'ymin': swXY.y,
          'xmax': neXY.x,
          'ymax': neXY.y,
          'spatialReferece': {
              'latestWkid': 102100,
              'wkid': 3857
          }
      };
  }
  ;
  function quantizationParameters(tileZoomLevel, tileSize = 256) {
      return {
          mode: 'view',
          originPosition: 'upperLeft',
          tolerance: metersPerPixel(tileZoomLevel, tileSize),
          extent: getEsriBoundingBox([-180.0, -85.06, 180, 85.06])
      };
  }
  ;
  function mergeRings(ringsX, ringsY, srid) {
      const reproject = (x, y) => {
          const xy = toWGS84(x, y);
          return [xy.lng, xy.lat];
      };
      if (webMercatorCodes.indexOf(srid) > -1) {
          return ringsX.map((ring, i) => ring.map((x, j) => reproject(x, ringsY[i][j])));
      }
      else {
          return ringsX.map((ring, i) => ring.map((x, j) => [x, ringsY[i][j]]));
      }
  }
  ;
  function deZigZag(values, splits, scale, initialOffset, upperLeftOrigin) {
      return splits.map((split, i) => {
          let lastValue = 0;
          return Array(split).fill(undefined).map((_, j) => {
              const valueOffset = splits.reduce((a, v, idx) => a += (idx < i ? v : 0), 0);
              const value = values[valueOffset + j];
              const sign = upperLeftOrigin ? -1 : 1;
              let returnValue;
              if (j === 0) {
                  returnValue = (value * sign) + (initialOffset / scale);
              }
              else {
                  returnValue = (value * sign) + lastValue;
              }
              lastValue = returnValue;
              return returnValue;
          }).map((v) => v * scale);
      });
  }
  class DeZigZagJSON {
      constructor(features, transform, geometryType) {
          this.srid = '3857';
          this.features = features;
          this.transform = transform;
          this.geometryType = geometryType;
      }
      async convert() {
          return this.features.map(feature => {
              feature.geometry = this.convertGeometry(feature.geometry);
              return feature;
          });
      }
      convertGeometry(geometry) {
          const counts = [];
          const x = [];
          const y = [];
          if (this.geometryType === 'esriGeometryPoint') {
              counts.push(1);
              x.push(geometry.x);
              y.push(geometry.y);
          }
          else if (this.geometryType === 'esriGeometryMultipoint') {
              geometry.points.forEach(p => {
                  counts.push(1);
                  x.push(p[0]);
                  y.push(p[1]);
              });
          }
          else if (this.geometryType === 'esriGeometryPolyline') {
              geometry.paths.forEach(l => {
                  counts.push(l.length);
                  l.forEach(position => {
                      x.push(position[0]);
                      y.push(position[1]);
                  });
              });
          }
          else if (this.geometryType === 'esriGeometryPolygon') {
              geometry.rings.forEach(poly => {
                  counts.push(poly.length);
                  poly.forEach(position => {
                      x.push(position[0]);
                      y.push(position[1]);
                  });
              });
          }
          // dezigzag the rings, and merge + reproject them
          const ringsX = deZigZag(x, counts, this.transform.scale[0], this.transform.translate[0], false);
          const ringsY = deZigZag(y, counts, this.transform.scale[1], this.transform.translate[1], this.transform.originPosition === 'upperLeft');
          // Merge the rings
          const rings = mergeRings(ringsX, ringsY, this.srid);
          let newGeometry = {};
          if (this.geometryType === 'esriGeometryPoint') {
              newGeometry = { 'x': rings[0][0][0], 'y': rings[0][0][1] };
          }
          else if (this.geometryType === 'esriGeometryMultipoint') {
              newGeometry = { 'points': rings[0] };
          }
          else if (this.geometryType === 'esriGeometryPolyline') {
              newGeometry = { paths: rings };
          }
          else if (this.geometryType === 'esriGeometryPolygon') {
              newGeometry = { rings: rings };
          }
          return newGeometry;
      }
  }

  'use strict'; // code generated by pbf v3.2.1
  // FeatureCollectionPBuffer ========================================
  function proto () {
      let FeatureCollectionPBuffer = {};
      FeatureCollectionPBuffer.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer._readField, { version: "", queryResult: null }, end);
      };
      FeatureCollectionPBuffer._readField = function (tag, obj, pbf) {
          if (tag === 1)
              obj.version = pbf.readString();
          else if (tag === 2)
              obj.queryResult = FeatureCollectionPBuffer.QueryResult.read(pbf, pbf.readVarint() + pbf.pos);
      };
      FeatureCollectionPBuffer.write = function (obj, pbf) {
          if (obj.version)
              pbf.writeStringField(1, obj.version);
          if (obj.queryResult)
              pbf.writeMessage(2, FeatureCollectionPBuffer.QueryResult.write, obj.queryResult);
      };
      FeatureCollectionPBuffer.GeometryType = {
          "esriGeometryTypePoint": {
              "value": 0,
              "options": {}
          },
          "esriGeometryTypeMultipoint": {
              "value": 1,
              "options": {}
          },
          "esriGeometryTypePolyline": {
              "value": 2,
              "options": {}
          },
          "esriGeometryTypePolygon": {
              "value": 3,
              "options": {}
          },
          "esriGeometryTypeMultipatch": {
              "value": 4,
              "options": {}
          },
          "esriGeometryTypeNone": {
              "value": 127,
              "options": {}
          }
      };
      FeatureCollectionPBuffer.FieldType = {
          "esriFieldTypeSmallInteger": {
              "value": 0,
              "options": {}
          },
          "esriFieldTypeInteger": {
              "value": 1,
              "options": {}
          },
          "esriFieldTypeSingle": {
              "value": 2,
              "options": {}
          },
          "esriFieldTypeDouble": {
              "value": 3,
              "options": {}
          },
          "esriFieldTypeString": {
              "value": 4,
              "options": {}
          },
          "esriFieldTypeDate": {
              "value": 5,
              "options": {}
          },
          "esriFieldTypeOID": {
              "value": 6,
              "options": {}
          },
          "esriFieldTypeGeometry": {
              "value": 7,
              "options": {}
          },
          "esriFieldTypeBlob": {
              "value": 8,
              "options": {}
          },
          "esriFieldTypeRaster": {
              "value": 9,
              "options": {}
          },
          "esriFieldTypeGUID": {
              "value": 10,
              "options": {}
          },
          "esriFieldTypeGlobalID": {
              "value": 11,
              "options": {}
          },
          "esriFieldTypeXML": {
              "value": 12,
              "options": {}
          }
      };
      FeatureCollectionPBuffer.SQLType = {
          "sqlTypeBigInt": {
              "value": 0,
              "options": {}
          },
          "sqlTypeBinary": {
              "value": 1,
              "options": {}
          },
          "sqlTypeBit": {
              "value": 2,
              "options": {}
          },
          "sqlTypeChar": {
              "value": 3,
              "options": {}
          },
          "sqlTypeDate": {
              "value": 4,
              "options": {}
          },
          "sqlTypeDecimal": {
              "value": 5,
              "options": {}
          },
          "sqlTypeDouble": {
              "value": 6,
              "options": {}
          },
          "sqlTypeFloat": {
              "value": 7,
              "options": {}
          },
          "sqlTypeGeometry": {
              "value": 8,
              "options": {}
          },
          "sqlTypeGUID": {
              "value": 9,
              "options": {}
          },
          "sqlTypeInteger": {
              "value": 10,
              "options": {}
          },
          "sqlTypeLongNVarchar": {
              "value": 11,
              "options": {}
          },
          "sqlTypeLongVarbinary": {
              "value": 12,
              "options": {}
          },
          "sqlTypeLongVarchar": {
              "value": 13,
              "options": {}
          },
          "sqlTypeNChar": {
              "value": 14,
              "options": {}
          },
          "sqlTypeNVarchar": {
              "value": 15,
              "options": {}
          },
          "sqlTypeOther": {
              "value": 16,
              "options": {}
          },
          "sqlTypeReal": {
              "value": 17,
              "options": {}
          },
          "sqlTypeSmallInt": {
              "value": 18,
              "options": {}
          },
          "sqlTypeSqlXml": {
              "value": 19,
              "options": {}
          },
          "sqlTypeTime": {
              "value": 20,
              "options": {}
          },
          "sqlTypeTimestamp": {
              "value": 21,
              "options": {}
          },
          "sqlTypeTimestamp2": {
              "value": 22,
              "options": {}
          },
          "sqlTypeTinyInt": {
              "value": 23,
              "options": {}
          },
          "sqlTypeVarbinary": {
              "value": 24,
              "options": {}
          },
          "sqlTypeVarchar": {
              "value": 25,
              "options": {}
          }
      };
      FeatureCollectionPBuffer.QuantizeOriginPostion = {
          "upperLeft": {
              "value": 0,
              "options": {}
          },
          "lowerLeft": {
              "value": 1,
              "options": {}
          }
      };
      // FeatureCollectionPBuffer.SpatialReference ========================================
      FeatureCollectionPBuffer.SpatialReference = {};
      FeatureCollectionPBuffer.SpatialReference.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer.SpatialReference._readField, { wkid: 0, lastestWkid: 0, vcsWkid: 0, latestVcsWkid: 0, wkt: "" }, end);
      };
      FeatureCollectionPBuffer.SpatialReference._readField = function (tag, obj, pbf) {
          if (tag === 1)
              obj.wkid = pbf.readVarint();
          else if (tag === 2)
              obj.lastestWkid = pbf.readVarint();
          else if (tag === 3)
              obj.vcsWkid = pbf.readVarint();
          else if (tag === 4)
              obj.latestVcsWkid = pbf.readVarint();
          else if (tag === 5)
              obj.wkt = pbf.readString();
      };
      FeatureCollectionPBuffer.SpatialReference.write = function (obj, pbf) {
          if (obj.wkid)
              pbf.writeVarintField(1, obj.wkid);
          if (obj.lastestWkid)
              pbf.writeVarintField(2, obj.lastestWkid);
          if (obj.vcsWkid)
              pbf.writeVarintField(3, obj.vcsWkid);
          if (obj.latestVcsWkid)
              pbf.writeVarintField(4, obj.latestVcsWkid);
          if (obj.wkt)
              pbf.writeStringField(5, obj.wkt);
      };
      // FeatureCollectionPBuffer.Field ========================================
      FeatureCollectionPBuffer.Field = {};
      FeatureCollectionPBuffer.Field.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer.Field._readField, { name: "", fieldType: 0, alias: "", sqlType: 0, domain: "", defaultValue: "" }, end);
      };
      FeatureCollectionPBuffer.Field._readField = function (tag, obj, pbf) {
          if (tag === 1)
              obj.name = pbf.readString();
          else if (tag === 2)
              obj.fieldType = pbf.readVarint();
          else if (tag === 3)
              obj.alias = pbf.readString();
          else if (tag === 4)
              obj.sqlType = pbf.readVarint();
          else if (tag === 5)
              obj.domain = pbf.readString();
          else if (tag === 6)
              obj.defaultValue = pbf.readString();
      };
      FeatureCollectionPBuffer.Field.write = function (obj, pbf) {
          if (obj.name)
              pbf.writeStringField(1, obj.name);
          if (obj.fieldType)
              pbf.writeVarintField(2, obj.fieldType);
          if (obj.alias)
              pbf.writeStringField(3, obj.alias);
          if (obj.sqlType)
              pbf.writeVarintField(4, obj.sqlType);
          if (obj.domain)
              pbf.writeStringField(5, obj.domain);
          if (obj.defaultValue)
              pbf.writeStringField(6, obj.defaultValue);
      };
      // FeatureCollectionPBuffer.Value ========================================
      FeatureCollectionPBuffer.Value = {};
      FeatureCollectionPBuffer.Value.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer.Value._readField, { string_value: "", value_type: null, float_value: 0, double_value: 0, sint_value: 0, uint_value: 0, int64_value: 0, uint64_value: 0, sint64_value: 0, bool_value: false }, end);
      };
      FeatureCollectionPBuffer.Value._readField = function (tag, obj, pbf) {
          if (tag === 1)
              obj.string_value = pbf.readString(), obj.value_type = "string_value";
          else if (tag === 2)
              obj.float_value = pbf.readFloat(), obj.value_type = "float_value";
          else if (tag === 3)
              obj.double_value = pbf.readDouble(), obj.value_type = "double_value";
          else if (tag === 4)
              obj.sint_value = pbf.readSVarint(), obj.value_type = "sint_value";
          else if (tag === 5)
              obj.uint_value = pbf.readVarint(), obj.value_type = "uint_value";
          else if (tag === 6)
              obj.int64_value = pbf.readVarint(true), obj.value_type = "int64_value";
          else if (tag === 7)
              obj.uint64_value = pbf.readVarint(), obj.value_type = "uint64_value";
          else if (tag === 8)
              obj.sint64_value = pbf.readSVarint(), obj.value_type = "sint64_value";
          else if (tag === 9)
              obj.bool_value = pbf.readBoolean(), obj.value_type = "bool_value";
      };
      FeatureCollectionPBuffer.Value.write = function (obj, pbf) {
          if (obj.string_value)
              pbf.writeStringField(1, obj.string_value);
          if (obj.float_value)
              pbf.writeFloatField(2, obj.float_value);
          if (obj.double_value)
              pbf.writeDoubleField(3, obj.double_value);
          if (obj.sint_value)
              pbf.writeSVarintField(4, obj.sint_value);
          if (obj.uint_value)
              pbf.writeVarintField(5, obj.uint_value);
          if (obj.int64_value)
              pbf.writeVarintField(6, obj.int64_value);
          if (obj.uint64_value)
              pbf.writeVarintField(7, obj.uint64_value);
          if (obj.sint64_value)
              pbf.writeSVarintField(8, obj.sint64_value);
          if (obj.bool_value)
              pbf.writeBooleanField(9, obj.bool_value);
      };
      // FeatureCollectionPBuffer.Geometry ========================================
      FeatureCollectionPBuffer.Geometry = {};
      FeatureCollectionPBuffer.Geometry.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer.Geometry._readField, { lengths: [], coords: [] }, end);
      };
      FeatureCollectionPBuffer.Geometry._readField = function (tag, obj, pbf) {
          if (tag === 2)
              pbf.readPackedVarint(obj.lengths);
          else if (tag === 3)
              pbf.readPackedSVarint(obj.coords);
      };
      FeatureCollectionPBuffer.Geometry.write = function (obj, pbf) {
          if (obj.lengths)
              pbf.writePackedVarint(2, obj.lengths);
          if (obj.coords)
              pbf.writePackedSVarint(3, obj.coords);
      };
      // FeatureCollectionPBuffer.esriShapeBuffer ========================================
      FeatureCollectionPBuffer.esriShapeBuffer = {};
      FeatureCollectionPBuffer.esriShapeBuffer.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer.esriShapeBuffer._readField, { bytes: null }, end);
      };
      FeatureCollectionPBuffer.esriShapeBuffer._readField = function (tag, obj, pbf) {
          if (tag === 1)
              obj.bytes = pbf.readBytes();
      };
      FeatureCollectionPBuffer.esriShapeBuffer.write = function (obj, pbf) {
          if (obj.bytes)
              pbf.writeBytesField(1, obj.bytes);
      };
      // FeatureCollectionPBuffer.Feature ========================================
      FeatureCollectionPBuffer.Feature = {};
      FeatureCollectionPBuffer.Feature.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer.Feature._readField, { attributes: [], geometry: null, compressed_geometry: null, shapeBuffer: null, centroid: null }, end);
      };
      FeatureCollectionPBuffer.Feature._readField = function (tag, obj, pbf) {
          if (tag === 1)
              obj.attributes.push(FeatureCollectionPBuffer.Value.read(pbf, pbf.readVarint() + pbf.pos));
          else if (tag === 2)
              obj.geometry = FeatureCollectionPBuffer.Geometry.read(pbf, pbf.readVarint() + pbf.pos), obj.compressed_geometry = "geometry";
          else if (tag === 3)
              obj.shapeBuffer = FeatureCollectionPBuffer.esriShapeBuffer.read(pbf, pbf.readVarint() + pbf.pos), obj.compressed_geometry = "shapeBuffer";
          else if (tag === 4)
              obj.centroid = FeatureCollectionPBuffer.Geometry.read(pbf, pbf.readVarint() + pbf.pos);
      };
      FeatureCollectionPBuffer.Feature.write = function (obj, pbf) {
          if (obj.attributes)
              for (var i = 0; i < obj.attributes.length; i++)
                  pbf.writeMessage(1, FeatureCollectionPBuffer.Value.write, obj.attributes[i]);
          if (obj.geometry)
              pbf.writeMessage(2, FeatureCollectionPBuffer.Geometry.write, obj.geometry);
          if (obj.shapeBuffer)
              pbf.writeMessage(3, FeatureCollectionPBuffer.esriShapeBuffer.write, obj.shapeBuffer);
          if (obj.centroid)
              pbf.writeMessage(4, FeatureCollectionPBuffer.Geometry.write, obj.centroid);
      };
      // FeatureCollectionPBuffer.UniqueIdField ========================================
      FeatureCollectionPBuffer.UniqueIdField = {};
      FeatureCollectionPBuffer.UniqueIdField.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer.UniqueIdField._readField, { name: "", isSystemMaintained: false }, end);
      };
      FeatureCollectionPBuffer.UniqueIdField._readField = function (tag, obj, pbf) {
          if (tag === 1)
              obj.name = pbf.readString();
          else if (tag === 2)
              obj.isSystemMaintained = pbf.readBoolean();
      };
      FeatureCollectionPBuffer.UniqueIdField.write = function (obj, pbf) {
          if (obj.name)
              pbf.writeStringField(1, obj.name);
          if (obj.isSystemMaintained)
              pbf.writeBooleanField(2, obj.isSystemMaintained);
      };
      // FeatureCollectionPBuffer.GeometryProperties ========================================
      FeatureCollectionPBuffer.GeometryProperties = {};
      FeatureCollectionPBuffer.GeometryProperties.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer.GeometryProperties._readField, { shapeAreaFieldName: "", shapeLengthFieldName: "", units: "" }, end);
      };
      FeatureCollectionPBuffer.GeometryProperties._readField = function (tag, obj, pbf) {
          if (tag === 1)
              obj.shapeAreaFieldName = pbf.readString();
          else if (tag === 2)
              obj.shapeLengthFieldName = pbf.readString();
          else if (tag === 3)
              obj.units = pbf.readString();
      };
      FeatureCollectionPBuffer.GeometryProperties.write = function (obj, pbf) {
          if (obj.shapeAreaFieldName)
              pbf.writeStringField(1, obj.shapeAreaFieldName);
          if (obj.shapeLengthFieldName)
              pbf.writeStringField(2, obj.shapeLengthFieldName);
          if (obj.units)
              pbf.writeStringField(3, obj.units);
      };
      // FeatureCollectionPBuffer.ServerGens ========================================
      FeatureCollectionPBuffer.ServerGens = {};
      FeatureCollectionPBuffer.ServerGens.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer.ServerGens._readField, { minServerGen: 0, serverGen: 0 }, end);
      };
      FeatureCollectionPBuffer.ServerGens._readField = function (tag, obj, pbf) {
          if (tag === 1)
              obj.minServerGen = pbf.readVarint();
          else if (tag === 2)
              obj.serverGen = pbf.readVarint();
      };
      FeatureCollectionPBuffer.ServerGens.write = function (obj, pbf) {
          if (obj.minServerGen)
              pbf.writeVarintField(1, obj.minServerGen);
          if (obj.serverGen)
              pbf.writeVarintField(2, obj.serverGen);
      };
      // FeatureCollectionPBuffer.Scale ========================================
      FeatureCollectionPBuffer.Scale = {};
      FeatureCollectionPBuffer.Scale.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer.Scale._readField, { xScale: 0, yScale: 0, mScale: 0, zScale: 0 }, end);
      };
      FeatureCollectionPBuffer.Scale._readField = function (tag, obj, pbf) {
          if (tag === 1)
              obj.xScale = pbf.readDouble();
          else if (tag === 2)
              obj.yScale = pbf.readDouble();
          else if (tag === 3)
              obj.mScale = pbf.readDouble();
          else if (tag === 4)
              obj.zScale = pbf.readDouble();
      };
      FeatureCollectionPBuffer.Scale.write = function (obj, pbf) {
          if (obj.xScale)
              pbf.writeDoubleField(1, obj.xScale);
          if (obj.yScale)
              pbf.writeDoubleField(2, obj.yScale);
          if (obj.mScale)
              pbf.writeDoubleField(3, obj.mScale);
          if (obj.zScale)
              pbf.writeDoubleField(4, obj.zScale);
      };
      // FeatureCollectionPBuffer.Translate ========================================
      FeatureCollectionPBuffer.Translate = {};
      FeatureCollectionPBuffer.Translate.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer.Translate._readField, { xTranslate: 0, yTranslate: 0, mTranslate: 0, zTranslate: 0 }, end);
      };
      FeatureCollectionPBuffer.Translate._readField = function (tag, obj, pbf) {
          if (tag === 1)
              obj.xTranslate = pbf.readDouble();
          else if (tag === 2)
              obj.yTranslate = pbf.readDouble();
          else if (tag === 3)
              obj.mTranslate = pbf.readDouble();
          else if (tag === 4)
              obj.zTranslate = pbf.readDouble();
      };
      FeatureCollectionPBuffer.Translate.write = function (obj, pbf) {
          if (obj.xTranslate)
              pbf.writeDoubleField(1, obj.xTranslate);
          if (obj.yTranslate)
              pbf.writeDoubleField(2, obj.yTranslate);
          if (obj.mTranslate)
              pbf.writeDoubleField(3, obj.mTranslate);
          if (obj.zTranslate)
              pbf.writeDoubleField(4, obj.zTranslate);
      };
      // FeatureCollectionPBuffer.Transform ========================================
      FeatureCollectionPBuffer.Transform = {};
      FeatureCollectionPBuffer.Transform.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer.Transform._readField, { quantizeOriginPostion: 0, scale: null, translate: null }, end);
      };
      FeatureCollectionPBuffer.Transform._readField = function (tag, obj, pbf) {
          if (tag === 1)
              obj.quantizeOriginPostion = pbf.readVarint();
          else if (tag === 2)
              obj.scale = FeatureCollectionPBuffer.Scale.read(pbf, pbf.readVarint() + pbf.pos);
          else if (tag === 3)
              obj.translate = FeatureCollectionPBuffer.Translate.read(pbf, pbf.readVarint() + pbf.pos);
      };
      FeatureCollectionPBuffer.Transform.write = function (obj, pbf) {
          if (obj.quantizeOriginPostion)
              pbf.writeVarintField(1, obj.quantizeOriginPostion);
          if (obj.scale)
              pbf.writeMessage(2, FeatureCollectionPBuffer.Scale.write, obj.scale);
          if (obj.translate)
              pbf.writeMessage(3, FeatureCollectionPBuffer.Translate.write, obj.translate);
      };
      // FeatureCollectionPBuffer.FeatureResult ========================================
      FeatureCollectionPBuffer.FeatureResult = {};
      FeatureCollectionPBuffer.FeatureResult.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer.FeatureResult._readField, { objectIdFieldName: "", uniqueIdField: null, globalIdFieldName: "", geohashFieldName: "", geometryProperties: null, serverGens: null, geometryType: 0, spatialReference: null, exceededTransferLimit: false, hasZ: false, hasM: false, transform: null, fields: [], values: [], features: [] }, end);
      };
      FeatureCollectionPBuffer.FeatureResult._readField = function (tag, obj, pbf) {
          if (tag === 1)
              obj.objectIdFieldName = pbf.readString();
          else if (tag === 2)
              obj.uniqueIdField = FeatureCollectionPBuffer.UniqueIdField.read(pbf, pbf.readVarint() + pbf.pos);
          else if (tag === 3)
              obj.globalIdFieldName = pbf.readString();
          else if (tag === 4)
              obj.geohashFieldName = pbf.readString();
          else if (tag === 5)
              obj.geometryProperties = FeatureCollectionPBuffer.GeometryProperties.read(pbf, pbf.readVarint() + pbf.pos);
          else if (tag === 6)
              obj.serverGens = FeatureCollectionPBuffer.ServerGens.read(pbf, pbf.readVarint() + pbf.pos);
          else if (tag === 7)
              obj.geometryType = pbf.readVarint();
          else if (tag === 8)
              obj.spatialReference = FeatureCollectionPBuffer.SpatialReference.read(pbf, pbf.readVarint() + pbf.pos);
          else if (tag === 9)
              obj.exceededTransferLimit = pbf.readBoolean();
          else if (tag === 10)
              obj.hasZ = pbf.readBoolean();
          else if (tag === 11)
              obj.hasM = pbf.readBoolean();
          else if (tag === 12)
              obj.transform = FeatureCollectionPBuffer.Transform.read(pbf, pbf.readVarint() + pbf.pos);
          else if (tag === 13)
              obj.fields.push(FeatureCollectionPBuffer.Field.read(pbf, pbf.readVarint() + pbf.pos));
          else if (tag === 14)
              obj.values.push(FeatureCollectionPBuffer.Value.read(pbf, pbf.readVarint() + pbf.pos));
          else if (tag === 15)
              obj.features.push(FeatureCollectionPBuffer.Feature.read(pbf, pbf.readVarint() + pbf.pos));
      };
      FeatureCollectionPBuffer.FeatureResult.write = function (obj, pbf) {
          if (obj.objectIdFieldName)
              pbf.writeStringField(1, obj.objectIdFieldName);
          if (obj.uniqueIdField)
              pbf.writeMessage(2, FeatureCollectionPBuffer.UniqueIdField.write, obj.uniqueIdField);
          if (obj.globalIdFieldName)
              pbf.writeStringField(3, obj.globalIdFieldName);
          if (obj.geohashFieldName)
              pbf.writeStringField(4, obj.geohashFieldName);
          if (obj.geometryProperties)
              pbf.writeMessage(5, FeatureCollectionPBuffer.GeometryProperties.write, obj.geometryProperties);
          if (obj.serverGens)
              pbf.writeMessage(6, FeatureCollectionPBuffer.ServerGens.write, obj.serverGens);
          if (obj.geometryType)
              pbf.writeVarintField(7, obj.geometryType);
          if (obj.spatialReference)
              pbf.writeMessage(8, FeatureCollectionPBuffer.SpatialReference.write, obj.spatialReference);
          if (obj.exceededTransferLimit)
              pbf.writeBooleanField(9, obj.exceededTransferLimit);
          if (obj.hasZ)
              pbf.writeBooleanField(10, obj.hasZ);
          if (obj.hasM)
              pbf.writeBooleanField(11, obj.hasM);
          if (obj.transform)
              pbf.writeMessage(12, FeatureCollectionPBuffer.Transform.write, obj.transform);
          if (obj.fields)
              for (var i = 0; i < obj.fields.length; i++)
                  pbf.writeMessage(13, FeatureCollectionPBuffer.Field.write, obj.fields[i]);
          if (obj.values)
              for (i = 0; i < obj.values.length; i++)
                  pbf.writeMessage(14, FeatureCollectionPBuffer.Value.write, obj.values[i]);
          if (obj.features)
              for (i = 0; i < obj.features.length; i++)
                  pbf.writeMessage(15, FeatureCollectionPBuffer.Feature.write, obj.features[i]);
      };
      // FeatureCollectionPBuffer.CountResult ========================================
      FeatureCollectionPBuffer.CountResult = {};
      FeatureCollectionPBuffer.CountResult.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer.CountResult._readField, { count: 0 }, end);
      };
      FeatureCollectionPBuffer.CountResult._readField = function (tag, obj, pbf) {
          if (tag === 1)
              obj.count = pbf.readVarint();
      };
      FeatureCollectionPBuffer.CountResult.write = function (obj, pbf) {
          if (obj.count)
              pbf.writeVarintField(1, obj.count);
      };
      // FeatureCollectionPBuffer.ObjectIdsResult ========================================
      FeatureCollectionPBuffer.ObjectIdsResult = {};
      FeatureCollectionPBuffer.ObjectIdsResult.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer.ObjectIdsResult._readField, { objectIdFieldName: "", serverGens: null, objectIds: [] }, end);
      };
      FeatureCollectionPBuffer.ObjectIdsResult._readField = function (tag, obj, pbf) {
          if (tag === 1)
              obj.objectIdFieldName = pbf.readString();
          else if (tag === 2)
              obj.serverGens = FeatureCollectionPBuffer.ServerGens.read(pbf, pbf.readVarint() + pbf.pos);
          else if (tag === 3)
              pbf.readPackedVarint(obj.objectIds);
      };
      FeatureCollectionPBuffer.ObjectIdsResult.write = function (obj, pbf) {
          if (obj.objectIdFieldName)
              pbf.writeStringField(1, obj.objectIdFieldName);
          if (obj.serverGens)
              pbf.writeMessage(2, FeatureCollectionPBuffer.ServerGens.write, obj.serverGens);
          if (obj.objectIds)
              pbf.writePackedVarint(3, obj.objectIds);
      };
      // FeatureCollectionPBuffer.QueryResult ========================================
      FeatureCollectionPBuffer.QueryResult = {};
      FeatureCollectionPBuffer.QueryResult.read = function (pbf, end) {
          return pbf.readFields(FeatureCollectionPBuffer.QueryResult._readField, { featureResult: null, Results: null, countResult: null, idsResult: null }, end);
      };
      FeatureCollectionPBuffer.QueryResult._readField = function (tag, obj, pbf) {
          if (tag === 1)
              obj.featureResult = FeatureCollectionPBuffer.FeatureResult.read(pbf, pbf.readVarint() + pbf.pos), obj.Results = "featureResult";
          else if (tag === 2)
              obj.countResult = FeatureCollectionPBuffer.CountResult.read(pbf, pbf.readVarint() + pbf.pos), obj.Results = "countResult";
          else if (tag === 3)
              obj.idsResult = FeatureCollectionPBuffer.ObjectIdsResult.read(pbf, pbf.readVarint() + pbf.pos), obj.Results = "idsResult";
      };
      FeatureCollectionPBuffer.QueryResult.write = function (obj, pbf) {
          if (obj.featureResult)
              pbf.writeMessage(1, FeatureCollectionPBuffer.FeatureResult.write, obj.featureResult);
          if (obj.countResult)
              pbf.writeMessage(2, FeatureCollectionPBuffer.CountResult.write, obj.countResult);
          if (obj.idsResult)
              pbf.writeMessage(3, FeatureCollectionPBuffer.ObjectIdsResult.write, obj.idsResult);
      };
      return FeatureCollectionPBuffer;
  }
  ;

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function getDefaultExportFromNamespaceIfPresent (n) {
  	return n && Object.prototype.hasOwnProperty.call(n, 'default') ? n['default'] : n;
  }

  function getDefaultExportFromNamespaceIfNotNamed (n) {
  	return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
  }

  function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var f = n.default;
  	if (typeof f == "function") {
  		var a = function a () {
  			if (this instanceof a) {
  				var args = [null];
  				args.push.apply(args, arguments);
  				var Ctor = Function.bind.apply(f, args);
  				return new Ctor();
  			}
  			return f.apply(this, arguments);
  		};
  		a.prototype = f.prototype;
    } else a = {};
    Object.defineProperty(a, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  var ieee754$1 = {};

  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */

  var read = ieee754$1.read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = (nBytes * 8) - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  };

  var write = ieee754$1.write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = (nBytes * 8) - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = ((value * c) - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  };

  'use strict';

  var pbf = Pbf;

  var ieee754 = ieee754$1;

  function Pbf(buf) {
      this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);
      this.pos = 0;
      this.type = 0;
      this.length = this.buf.length;
  }

  Pbf.Varint  = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum
  Pbf.Fixed64 = 1; // 64-bit: double, fixed64, sfixed64
  Pbf.Bytes   = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields
  Pbf.Fixed32 = 5; // 32-bit: float, fixed32, sfixed32

  var SHIFT_LEFT_32 = (1 << 16) * (1 << 16),
      SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;

  // Threshold chosen based on both benchmarking and knowledge about browser string
  // data structures (which currently switch structure types at 12 bytes or more)
  var TEXT_DECODER_MIN_LENGTH = 12;
  var utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf8');

  Pbf.prototype = {

      destroy: function() {
          this.buf = null;
      },

      // === READING =================================================================

      readFields: function(readField, result, end) {
          end = end || this.length;

          while (this.pos < end) {
              var val = this.readVarint(),
                  tag = val >> 3,
                  startPos = this.pos;

              this.type = val & 0x7;
              readField(tag, result, this);

              if (this.pos === startPos) this.skip(val);
          }
          return result;
      },

      readMessage: function(readField, result) {
          return this.readFields(readField, result, this.readVarint() + this.pos);
      },

      readFixed32: function() {
          var val = readUInt32(this.buf, this.pos);
          this.pos += 4;
          return val;
      },

      readSFixed32: function() {
          var val = readInt32(this.buf, this.pos);
          this.pos += 4;
          return val;
      },

      // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)

      readFixed64: function() {
          var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
          this.pos += 8;
          return val;
      },

      readSFixed64: function() {
          var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
          this.pos += 8;
          return val;
      },

      readFloat: function() {
          var val = ieee754.read(this.buf, this.pos, true, 23, 4);
          this.pos += 4;
          return val;
      },

      readDouble: function() {
          var val = ieee754.read(this.buf, this.pos, true, 52, 8);
          this.pos += 8;
          return val;
      },

      readVarint: function(isSigned) {
          var buf = this.buf,
              val, b;

          b = buf[this.pos++]; val  =  b & 0x7f;        if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 7;  if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 14; if (b < 0x80) return val;
          b = buf[this.pos++]; val |= (b & 0x7f) << 21; if (b < 0x80) return val;
          b = buf[this.pos];   val |= (b & 0x0f) << 28;

          return readVarintRemainder(val, isSigned, this);
      },

      readVarint64: function() { // for compatibility with v2.0.1
          return this.readVarint(true);
      },

      readSVarint: function() {
          var num = this.readVarint();
          return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding
      },

      readBoolean: function() {
          return Boolean(this.readVarint());
      },

      readString: function() {
          var end = this.readVarint() + this.pos;
          var pos = this.pos;
          this.pos = end;

          if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {
              // longer strings are fast with the built-in browser TextDecoder API
              return readUtf8TextDecoder(this.buf, pos, end);
          }
          // short strings are fast with our custom implementation
          return readUtf8(this.buf, pos, end);
      },

      readBytes: function() {
          var end = this.readVarint() + this.pos,
              buffer = this.buf.subarray(this.pos, end);
          this.pos = end;
          return buffer;
      },

      // verbose for performance reasons; doesn't affect gzipped size

      readPackedVarint: function(arr, isSigned) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readVarint(isSigned));
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readVarint(isSigned));
          return arr;
      },
      readPackedSVarint: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readSVarint());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSVarint());
          return arr;
      },
      readPackedBoolean: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readBoolean());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readBoolean());
          return arr;
      },
      readPackedFloat: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readFloat());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFloat());
          return arr;
      },
      readPackedDouble: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readDouble());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readDouble());
          return arr;
      },
      readPackedFixed32: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readFixed32());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFixed32());
          return arr;
      },
      readPackedSFixed32: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed32());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSFixed32());
          return arr;
      },
      readPackedFixed64: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readFixed64());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readFixed64());
          return arr;
      },
      readPackedSFixed64: function(arr) {
          if (this.type !== Pbf.Bytes) return arr.push(this.readSFixed64());
          var end = readPackedEnd(this);
          arr = arr || [];
          while (this.pos < end) arr.push(this.readSFixed64());
          return arr;
      },

      skip: function(val) {
          var type = val & 0x7;
          if (type === Pbf.Varint) while (this.buf[this.pos++] > 0x7f) {}
          else if (type === Pbf.Bytes) this.pos = this.readVarint() + this.pos;
          else if (type === Pbf.Fixed32) this.pos += 4;
          else if (type === Pbf.Fixed64) this.pos += 8;
          else throw new Error('Unimplemented type: ' + type);
      },

      // === WRITING =================================================================

      writeTag: function(tag, type) {
          this.writeVarint((tag << 3) | type);
      },

      realloc: function(min) {
          var length = this.length || 16;

          while (length < this.pos + min) length *= 2;

          if (length !== this.length) {
              var buf = new Uint8Array(length);
              buf.set(this.buf);
              this.buf = buf;
              this.length = length;
          }
      },

      finish: function() {
          this.length = this.pos;
          this.pos = 0;
          return this.buf.subarray(0, this.length);
      },

      writeFixed32: function(val) {
          this.realloc(4);
          writeInt32(this.buf, val, this.pos);
          this.pos += 4;
      },

      writeSFixed32: function(val) {
          this.realloc(4);
          writeInt32(this.buf, val, this.pos);
          this.pos += 4;
      },

      writeFixed64: function(val) {
          this.realloc(8);
          writeInt32(this.buf, val & -1, this.pos);
          writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
          this.pos += 8;
      },

      writeSFixed64: function(val) {
          this.realloc(8);
          writeInt32(this.buf, val & -1, this.pos);
          writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
          this.pos += 8;
      },

      writeVarint: function(val) {
          val = +val || 0;

          if (val > 0xfffffff || val < 0) {
              writeBigVarint(val, this);
              return;
          }

          this.realloc(4);

          this.buf[this.pos++] =           val & 0x7f  | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0); if (val <= 0x7f) return;
          this.buf[this.pos++] =   (val >>> 7) & 0x7f;
      },

      writeSVarint: function(val) {
          this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);
      },

      writeBoolean: function(val) {
          this.writeVarint(Boolean(val));
      },

      writeString: function(str) {
          str = String(str);
          this.realloc(str.length * 4);

          this.pos++; // reserve 1 byte for short string length

          var startPos = this.pos;
          // write the string directly to the buffer and see how much was written
          this.pos = writeUtf8(this.buf, str, this.pos);
          var len = this.pos - startPos;

          if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

          // finally, write the message length in the reserved place and restore the position
          this.pos = startPos - 1;
          this.writeVarint(len);
          this.pos += len;
      },

      writeFloat: function(val) {
          this.realloc(4);
          ieee754.write(this.buf, val, this.pos, true, 23, 4);
          this.pos += 4;
      },

      writeDouble: function(val) {
          this.realloc(8);
          ieee754.write(this.buf, val, this.pos, true, 52, 8);
          this.pos += 8;
      },

      writeBytes: function(buffer) {
          var len = buffer.length;
          this.writeVarint(len);
          this.realloc(len);
          for (var i = 0; i < len; i++) this.buf[this.pos++] = buffer[i];
      },

      writeRawMessage: function(fn, obj) {
          this.pos++; // reserve 1 byte for short message length

          // write the message directly to the buffer and see how much was written
          var startPos = this.pos;
          fn(obj, this);
          var len = this.pos - startPos;

          if (len >= 0x80) makeRoomForExtraLength(startPos, len, this);

          // finally, write the message length in the reserved place and restore the position
          this.pos = startPos - 1;
          this.writeVarint(len);
          this.pos += len;
      },

      writeMessage: function(tag, fn, obj) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeRawMessage(fn, obj);
      },

      writePackedVarint:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedVarint, arr);   },
      writePackedSVarint:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSVarint, arr);  },
      writePackedBoolean:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedBoolean, arr);  },
      writePackedFloat:    function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFloat, arr);    },
      writePackedDouble:   function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedDouble, arr);   },
      writePackedFixed32:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed32, arr);  },
      writePackedSFixed32: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed32, arr); },
      writePackedFixed64:  function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedFixed64, arr);  },
      writePackedSFixed64: function(tag, arr) { if (arr.length) this.writeMessage(tag, writePackedSFixed64, arr); },

      writeBytesField: function(tag, buffer) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeBytes(buffer);
      },
      writeFixed32Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeFixed32(val);
      },
      writeSFixed32Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeSFixed32(val);
      },
      writeFixed64Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeFixed64(val);
      },
      writeSFixed64Field: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeSFixed64(val);
      },
      writeVarintField: function(tag, val) {
          this.writeTag(tag, Pbf.Varint);
          this.writeVarint(val);
      },
      writeSVarintField: function(tag, val) {
          this.writeTag(tag, Pbf.Varint);
          this.writeSVarint(val);
      },
      writeStringField: function(tag, str) {
          this.writeTag(tag, Pbf.Bytes);
          this.writeString(str);
      },
      writeFloatField: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed32);
          this.writeFloat(val);
      },
      writeDoubleField: function(tag, val) {
          this.writeTag(tag, Pbf.Fixed64);
          this.writeDouble(val);
      },
      writeBooleanField: function(tag, val) {
          this.writeVarintField(tag, Boolean(val));
      }
  };

  function readVarintRemainder(l, s, p) {
      var buf = p.buf,
          h, b;

      b = buf[p.pos++]; h  = (b & 0x70) >> 4;  if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 3;  if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 10; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 17; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x7f) << 24; if (b < 0x80) return toNum(l, h, s);
      b = buf[p.pos++]; h |= (b & 0x01) << 31; if (b < 0x80) return toNum(l, h, s);

      throw new Error('Expected varint not more than 10 bytes');
  }

  function readPackedEnd(pbf) {
      return pbf.type === Pbf.Bytes ?
          pbf.readVarint() + pbf.pos : pbf.pos + 1;
  }

  function toNum(low, high, isSigned) {
      if (isSigned) {
          return high * 0x100000000 + (low >>> 0);
      }

      return ((high >>> 0) * 0x100000000) + (low >>> 0);
  }

  function writeBigVarint(val, pbf) {
      var low, high;

      if (val >= 0) {
          low  = (val % 0x100000000) | 0;
          high = (val / 0x100000000) | 0;
      } else {
          low  = ~(-val % 0x100000000);
          high = ~(-val / 0x100000000);

          if (low ^ 0xffffffff) {
              low = (low + 1) | 0;
          } else {
              low = 0;
              high = (high + 1) | 0;
          }
      }

      if (val >= 0x10000000000000000 || val < -0x10000000000000000) {
          throw new Error('Given varint doesn\'t fit into 10 bytes');
      }

      pbf.realloc(10);

      writeBigVarintLow(low, high, pbf);
      writeBigVarintHigh(high, pbf);
  }

  function writeBigVarintLow(low, high, pbf) {
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos++] = low & 0x7f | 0x80; low >>>= 7;
      pbf.buf[pbf.pos]   = low & 0x7f;
  }

  function writeBigVarintHigh(high, pbf) {
      var lsb = (high & 0x07) << 4;

      pbf.buf[pbf.pos++] |= lsb         | ((high >>>= 3) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f | ((high >>>= 7) ? 0x80 : 0); if (!high) return;
      pbf.buf[pbf.pos++]  = high & 0x7f;
  }

  function makeRoomForExtraLength(startPos, len, pbf) {
      var extraLen =
          len <= 0x3fff ? 1 :
          len <= 0x1fffff ? 2 :
          len <= 0xfffffff ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));

      // if 1 byte isn't enough for encoding message length, shift the data to the right
      pbf.realloc(extraLen);
      for (var i = pbf.pos - 1; i >= startPos; i--) pbf.buf[i + extraLen] = pbf.buf[i];
  }

  function writePackedVarint(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeVarint(arr[i]);   }
  function writePackedSVarint(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeSVarint(arr[i]);  }
  function writePackedFloat(arr, pbf)    { for (var i = 0; i < arr.length; i++) pbf.writeFloat(arr[i]);    }
  function writePackedDouble(arr, pbf)   { for (var i = 0; i < arr.length; i++) pbf.writeDouble(arr[i]);   }
  function writePackedBoolean(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeBoolean(arr[i]);  }
  function writePackedFixed32(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed32(arr[i]);  }
  function writePackedSFixed32(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed32(arr[i]); }
  function writePackedFixed64(arr, pbf)  { for (var i = 0; i < arr.length; i++) pbf.writeFixed64(arr[i]);  }
  function writePackedSFixed64(arr, pbf) { for (var i = 0; i < arr.length; i++) pbf.writeSFixed64(arr[i]); }

  // Buffer code below from https://github.com/feross/buffer, MIT-licensed

  function readUInt32(buf, pos) {
      return ((buf[pos]) |
          (buf[pos + 1] << 8) |
          (buf[pos + 2] << 16)) +
          (buf[pos + 3] * 0x1000000);
  }

  function writeInt32(buf, val, pos) {
      buf[pos] = val;
      buf[pos + 1] = (val >>> 8);
      buf[pos + 2] = (val >>> 16);
      buf[pos + 3] = (val >>> 24);
  }

  function readInt32(buf, pos) {
      return ((buf[pos]) |
          (buf[pos + 1] << 8) |
          (buf[pos + 2] << 16)) +
          (buf[pos + 3] << 24);
  }

  function readUtf8(buf, pos, end) {
      var str = '';
      var i = pos;

      while (i < end) {
          var b0 = buf[i];
          var c = null; // codepoint
          var bytesPerSequence =
              b0 > 0xEF ? 4 :
              b0 > 0xDF ? 3 :
              b0 > 0xBF ? 2 : 1;

          if (i + bytesPerSequence > end) break;

          var b1, b2, b3;

          if (bytesPerSequence === 1) {
              if (b0 < 0x80) {
                  c = b0;
              }
          } else if (bytesPerSequence === 2) {
              b1 = buf[i + 1];
              if ((b1 & 0xC0) === 0x80) {
                  c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);
                  if (c <= 0x7F) {
                      c = null;
                  }
              }
          } else if (bytesPerSequence === 3) {
              b1 = buf[i + 1];
              b2 = buf[i + 2];
              if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {
                  c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);
                  if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {
                      c = null;
                  }
              }
          } else if (bytesPerSequence === 4) {
              b1 = buf[i + 1];
              b2 = buf[i + 2];
              b3 = buf[i + 3];
              if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
                  c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);
                  if (c <= 0xFFFF || c >= 0x110000) {
                      c = null;
                  }
              }
          }

          if (c === null) {
              c = 0xFFFD;
              bytesPerSequence = 1;

          } else if (c > 0xFFFF) {
              c -= 0x10000;
              str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);
              c = 0xDC00 | c & 0x3FF;
          }

          str += String.fromCharCode(c);
          i += bytesPerSequence;
      }

      return str;
  }

  function readUtf8TextDecoder(buf, pos, end) {
      return utf8TextDecoder.decode(buf.subarray(pos, end));
  }

  function writeUtf8(buf, str, pos) {
      for (var i = 0, c, lead; i < str.length; i++) {
          c = str.charCodeAt(i); // code point

          if (c > 0xD7FF && c < 0xE000) {
              if (lead) {
                  if (c < 0xDC00) {
                      buf[pos++] = 0xEF;
                      buf[pos++] = 0xBF;
                      buf[pos++] = 0xBD;
                      lead = c;
                      continue;
                  } else {
                      c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;
                      lead = null;
                  }
              } else {
                  if (c > 0xDBFF || (i + 1 === str.length)) {
                      buf[pos++] = 0xEF;
                      buf[pos++] = 0xBF;
                      buf[pos++] = 0xBD;
                  } else {
                      lead = c;
                  }
                  continue;
              }
          } else if (lead) {
              buf[pos++] = 0xEF;
              buf[pos++] = 0xBF;
              buf[pos++] = 0xBD;
              lead = null;
          }

          if (c < 0x80) {
              buf[pos++] = c;
          } else {
              if (c < 0x800) {
                  buf[pos++] = c >> 0x6 | 0xC0;
              } else {
                  if (c < 0x10000) {
                      buf[pos++] = c >> 0xC | 0xE0;
                  } else {
                      buf[pos++] = c >> 0x12 | 0xF0;
                      buf[pos++] = c >> 0xC & 0x3F | 0x80;
                  }
                  buf[pos++] = c >> 0x6 & 0x3F | 0x80;
              }
              buf[pos++] = c & 0x3F | 0x80;
          }
      }
      return pos;
  }

  ;
  ;
  //type ArcgisRestSourceSpecification = any;
  var esriPbfGeometryTypeEnum;
  (function (esriPbfGeometryTypeEnum) {
      esriPbfGeometryTypeEnum[esriPbfGeometryTypeEnum["esriGeometryTypePoint"] = 0] = "esriGeometryTypePoint";
      esriPbfGeometryTypeEnum[esriPbfGeometryTypeEnum["esriGeometryTypeMultipoint"] = 1] = "esriGeometryTypeMultipoint";
      esriPbfGeometryTypeEnum[esriPbfGeometryTypeEnum["esriGeometryTypePolyline"] = 2] = "esriGeometryTypePolyline";
      esriPbfGeometryTypeEnum[esriPbfGeometryTypeEnum["esriGeometryTypePolygon"] = 3] = "esriGeometryTypePolygon";
      esriPbfGeometryTypeEnum[esriPbfGeometryTypeEnum["esriGeometryTypeMultipatch"] = 4] = "esriGeometryTypeMultipatch";
      esriPbfGeometryTypeEnum[esriPbfGeometryTypeEnum["esriGeometryTypeNone"] = 127] = "esriGeometryTypeNone";
  })(esriPbfGeometryTypeEnum || (esriPbfGeometryTypeEnum = {}));
  ;

  class ConvertPbf {
      constructor(pbfData) {
          this.data = pbfData;
      }
      async convert() {
          var _a;
          const pbf$1 = new pbf(this.data);
          const pbfJson = proto().read(pbf$1);
          // Get the FeatureResult
          if (pbfJson.queryResult === null) {
              //console.warn('issue with the result', pbfJson);
              return this._buildResponse({
                  'exceededTransferLimit': true,
              }, []);
          }
          const featureResult = pbfJson.queryResult.featureResult;
          // Get the field names
          const fields = featureResult.fields.map((field) => field.name);
          // Get the translation info
          const translation = featureResult.transform.translate;
          const scale = featureResult.transform.scale;
          const geometryType = featureResult.geometryType;
          const quantizeOriginPostion = featureResult.transform.quantizeOriginPostion;
          const srid = (_a = featureResult.spatialReference) === null || _a === void 0 ? void 0 : _a.wkid.toString();
          const features = featureResult.features.map((feature) => {
              // Parse each attribute
              let attributes = feature.attributes
                  .map((attribute, index) => ({ 'key': fields[index], 'value': attribute[attribute['value_type']] }))
                  .reduce((a, c) => {
                  const newObj = {};
                  newObj[c.key] = c.value;
                  return { ...a, ...newObj };
              }, {});
              // Parse the geometries and clean up the quantization
              let rings = [[[]]];
              if ((feature.geometry !== null)) {
                  let counts = geometryType === esriPbfGeometryTypeEnum.esriGeometryTypePoint ? [1] : (feature.geometry.lengths);
                  // Break into X and Y rings
                  let x = [];
                  let y = [];
                  feature.geometry.coords.forEach((coord, idx) => {
                      if (idx % 2 === 0) {
                          x.push(coord);
                      }
                      else {
                          y.push(coord);
                      }
                  });
                  //let x = feature.geometry.coords.filter((_: number, idx: number) => idx % 2 === 0);
                  //let y = feature.geometry.coords.filter((_: number, idx: number) => idx % 2 === 1);
                  // dezigzag the rings, and merge + reproject them
                  let ringsX = deZigZag(x, counts, scale.xScale, translation.xTranslate, false);
                  let ringsY = deZigZag(y, counts, scale.yScale, translation.yTranslate, quantizeOriginPostion === 0);
                  // Merge the rings
                  rings = mergeRings(ringsX, ringsY, srid);
                  //rings = ringsX.map((ring, i) => ring.map((x, j) => [x, ringsY[i][j]]));
              }
              let geometry = {};
              if (esriPbfGeometryTypeEnum[geometryType] === 'esriGeometryTypePoint') {
                  geometry = { 'x': rings[0][0][0], 'y': rings[0][0][1] };
              }
              else if (esriPbfGeometryTypeEnum[geometryType] === 'esriGeometryTypeMultiPoint') {
                  geometry = { 'points': rings[0] };
              }
              else if (esriPbfGeometryTypeEnum[geometryType] === 'esriGeometryTypePolyline') {
                  geometry = { paths: rings };
              }
              else if (esriPbfGeometryTypeEnum[geometryType] === 'esriGeometryTypePolygon') {
                  geometry = { rings: rings };
              }
              return {
                  'geometry': geometry,
                  'attributes': attributes,
              };
          });
          return this._buildResponse(featureResult, features);
      }
      _buildResponse(featureResult, features) {
          return {
              'features': features,
              'exceededTransferLimit': featureResult.exceededTransferLimit,
              'spatialReference': { 'wkid': 4326, 'latestWkid': 4326 },
              'geometryType': esriPbfGeometryTypeEnum[featureResult.geometryType || 127].replace('Type', ''),
              'hasM': featureResult.hasM,
              'hasZ': featureResult.hasZ,
              'globalIdFieldName': featureResult.globalIdFieldName
          };
      }
  }
  ;

  class GeometriesAtZoom {
      constructor() {
          // Keeps track of the geometries that have already been loaded
          this._geometriesAtZoom = new Array(24);
          this._maxGeometryZoom = 0;
      }
      async getKeysAtZoom(zoom, maxZoom) {
          // Determine the max zoom based on the user input, the map's maxzoom, or the maxzoom we have cached
          maxZoom = maxZoom !== undefined ? maxZoom : this._maxGeometryZoom;
          const geometryGroups = [];
          for (let z = (Math.min(maxZoom, this._maxGeometryZoom)); z >= zoom; z--) {
              if (this._geometriesAtZoom[z] !== undefined) {
                  geometryGroups.push([...this._geometriesAtZoom[z].keys()]);
              }
          }
          return geometryGroups.flat();
      }
      updateKeyAtZoom(zoom, primaryKey) {
          let returnValue = 'added';
          if (this._geometriesAtZoom[zoom] === undefined)
              this._geometriesAtZoom[zoom] = new Map();
          this._maxGeometryZoom = Math.max(this._maxGeometryZoom, zoom);
          for (let z = 0; z < zoom; z++) {
              if (this._geometriesAtZoom[z] !== undefined) {
                  this._geometriesAtZoom[z].delete(primaryKey);
                  returnValue = 'updated';
              }
          }
          this._geometriesAtZoom[zoom].set(primaryKey, true);
          return returnValue;
      }
      async updateKeysAtZoom(zoom, primaryKeys) {
          return primaryKeys.map(primaryKey => this.updateKeyAtZoom(zoom, primaryKey));
      }
  }

  const libraries = {
      'ConvertPbf': ConvertPbf,
      'GeometriesAtZoom': GeometriesAtZoom,
      'DeZigZagJSON': DeZigZagJSON
  };
  const subClasses = Object.keys(libraries);
  let subClass;
  self.addEventListener('message', e => {
      const data = (e.data || e);
      const post = (id, err, res, type) => {
          postMessage({
              type: type ? type : (err ? 'error' : 'response'),
              id: id,
              message: res,
              error: err
          });
      };
      const commands = {
          'init': (msg) => {
              const { id, command, message } = msg;
              subClass = new libraries[command](...message);
              // return the class' methods
              const fns = [
                  ...Object.getOwnPropertyNames(libraries[command].prototype),
                  ...Object.keys(subClass)
              ].map(key => [key, typeof libraries[command].prototype[key]])
                  .reduce((a, c) => ({ ...a, ...{ [c[0]]: c[1] } }), {});
              post(id, undefined, fns, 'init_response');
          },
          'get': function (msg) {
              const { id, command } = msg;
              if (subClass && subClass[command]) {
                  post(id, undefined, subClass[command]);
              }
              else {
                  post(id, undefined, undefined);
              }
          },
          'exec': function (msg) {
              const { id, command, message } = msg;
              if (subClass && subClass[command] && typeof subClass[command] === 'function') {
                  const cmd = subClass[command]
                      .apply(subClass, message);
                  if (!!cmd && typeof cmd.then === 'function') {
                      // It's a promise, so wait for it
                      cmd
                          .then(res => post(id, undefined, res))
                          .catch(e => post(id, e));
                  }
                  else {
                      // Not a promise, just return it
                      post(id, undefined, cmd);
                  }
              }
              else {
                  // Error
                  post(id, new Error(`command "${command}" not found`));
              }
          }
      };
      if (commands[data.type]) {
          commands[data.type](data);
      }
  });

  const rnd = () => Math.random().toString(36).substring(2);
  function supportsWorkers() {
      let supported = false;
      try {
          supported = typeof (window.Worker) === 'function';
      }
      catch (e) {
          supported = false;
      }
      return supported;
  }
  ;
  function createActor(subClass, args = []) {
      if (supportsWorkers()) {
          //throw new Error('WebWorker Not Supported');
          return new Actor(subClass, args);
      }
      else {
          return new WorkerlessActor(subClass, args);
      }
  }
  ;
  class Actor {
      constructor(subClass, args = []) {
          this.initId = rnd() + '-' + subClass;
          this.worker = new WorkerFactory();
          this.handlers = new Map();
          // Listen for any messages back from the worker
          this.worker.onmessage = (event) => {
              const data = event.data;
              const handler = this.handlers.get(data.id);
              const that = this;
              if (handler) {
                  if (data.type === 'response') {
                      handler.res(data.message);
                  }
                  if (data.type === 'error') {
                      const error = data.error || new Error(`Unknown error with ${this.subClass}`);
                      handler.rej(error);
                  }
                  if (data.type === 'init_response') {
                      this._ = Object.keys(data.message)
                          .map(key => {
                          const isFn = typeof data.message[key];
                          const subFunction = function () {
                              return isFn ?
                                  that.exec(key)(...arguments) :
                                  that.get(key);
                          };
                          return [key, subFunction];
                      })
                          .reduce((a, c) => ({ ...a, ...{ [c[0]]: c[1] } }), {});
                      handler.res(this._);
                  }
              }
          };
          // Tell the worker to create the class
          this.worker.postMessage({
              type: 'init',
              id: this.initId,
              command: subClass,
              message: args
          });
      }
      onLoad() {
          return new Promise((res) => {
              (this._ === undefined) ?
                  this.handlers.set(this.initId, { 'res': res, 'rej': res }) :
                  res(this._);
          });
      }
      exec(command) {
          const that = this;
          return function (...args) {
              return new Promise((res, rej) => {
                  const id = rnd() + '-' + command;
                  that.handlers.set(id, { 'res': res, 'rej': rej });
                  // Tell the worker to run the command
                  that.worker.postMessage({
                      type: 'exec',
                      id: id,
                      command: command,
                      message: [...args]
                  });
              });
          };
      }
      get(command) {
          return new Promise((res, rej) => {
              const id = rnd() + '-' + command;
              this.handlers.set(id, { 'res': res, 'rej': rej });
              // Tell the worker to run the command
              this.worker.postMessage({
                  type: 'get',
                  id: id,
                  command: command,
                  message: []
              });
          });
      }
  }
  ;
  /** Mimic the Actor so we can use the same interface when WebWorkers are not supported */
  class WorkerlessActor {
      constructor(subClass, args = []) {
          this.subClass = new libraries[subClass](...args);
      }
      onLoad() {
          return new Promise(res => res(this));
      }
      get(command) {
          return new Promise((res) => res(this.subClass[command]));
      }
      exec(command) {
          const that = this;
          return function (...args) {
              return Promise.resolve(that.subClass[command](...args));
          };
      }
  }

  class MapFetch {
      constructor(map) {
          this._map = map;
      }
      async fetch(url, init = {}, callbackCancel) {
          let urlString = url.toString();
          // URLs over 2048 characters can't use GET, so if no method is set, switch them to POST
          // Convert the body to a query string
          // TODO if there is already a querystring, we can't just append it
          // TODO this only works with urlencoded bodies, there can be others?
          const getUrl = init.body ? (urlString.replace(/\??$/, '?') + init.body) : urlString;
          if (getUrl.length > 2048 && init.method === undefined) {
              init.method = 'POST';
          }
          // Default to GET
          init.method = ['POST', 'GET', 'PUT'].indexOf((init.method || '').toUpperCase()) > -1 ? (init.method || '').toUpperCase() : 'GET';
          if (init.method === 'GET') {
              // We can't use the body, so we need to make it into a queryString
              urlString = getUrl;
          }
          const requestParameters = {
              url: urlString,
              method: init.method
          };
          if (init.method === 'POST') {
              if (init.headers)
                  requestParameters.headers = init.headers;
              if (init.body)
                  requestParameters.body = init.body.toString();
          }
          return ({
              arrayBuffer: async () => {
                  requestParameters.type = 'arrayBuffer';
                  return this._getResource(requestParameters, callbackCancel);
              },
              json: async () => {
                  requestParameters.type = 'json';
                  return this._getResource(requestParameters, callbackCancel);
              },
              text: async () => {
                  requestParameters.type = 'string';
                  return this._getResource(requestParameters, callbackCancel);
              }
          });
      }
      async _getResource(requestParameters, callbackCancel) {
          return new Promise((res, rej) => {
              let cancelable = this._map.style.getResource(Math.random().toString(32).substring(2), requestParameters, (e, r) => {
                  if (e) {
                      rej(e.toString());
                  }
                  else {
                      res(r);
                  }
                  ;
              });
              if (callbackCancel) {
                  callbackCancel({
                      'cancel': () => {
                          cancelable.cancel();
                          rej('cancel');
                      }
                  });
              }
          });
      }
  }

  const ArcGisRestSourceDefaults = {
      where: '1=1',
      outfields: '*',
      resultRecordCount: undefined,
  };
  function ArcGisRestSource(mapLibrary) {
      return class ArcGisRest extends mapLibrary['GeoJSONSource'] {
          constructor(id, originalSource, dispatcher, eventedParent) {
              super(id, { 'type': 'geojson', collectResourceTiming: false }, dispatcher, eventedParent);
              this._quantizedQuery = false;
              this._requestFormat = 'json';
              this._geometriesAtZoom = createActor('GeometriesAtZoom');
              this._requests = [];
              this._sortableFields = [];
              this._events = new mapLibrary['Evented'];
              this._liveLayer = false;
              this._waitTimes = {};
              // Set the defaults
              this.id = id;
              this._originalSource = { ...ArcGisRestSourceDefaults, ...originalSource };
              // Clean the input URL to remove trailing query strings
              const cleanedUrl = this._originalSource.url.match(/.+?[Feature|Map]Server\/\d{1,}/);
              if (cleanedUrl) {
                  this._originalSource.url = cleanedUrl[0];
              }
              else {
                  throw new Error('ArcGisRest URL is invalid ' + this._originalSource.url);
              }
              window.source = this;
          }
          onAdd(map) {
              this.map = map;
              this._asyncLoad(map).then(() => super.load());
          }
          async _asyncLoad(map) {
              // Read the config from the server
              const url = new URL(this._originalSource.url);
              url.searchParams.append('f', 'json');
              if (this._originalSource.token) {
                  url.searchParams.append('token', this._originalSource.token);
              }
              // Use the built in fetch, and make it cancellable
              const mapFetch = new MapFetch(map);
              const esriLayerConfig = await (await mapFetch.fetch(url)).json();
              if (esriLayerConfig.error) {
                  console.error('ArcGIS Error', esriLayerConfig.error);
                  return false;
              }
              // Get some important values from this
              const maxRecordCount = esriLayerConfig.maxRecordCount || 500;
              const supportedQueryFormats = (esriLayerConfig.supportedQueryFormats || "")
                  .toLowerCase()
                  .replace(/\s/g, '')
                  .split(',');
              const supportsPbf = supportedQueryFormats.indexOf('pbf') > -1;
              this._requestFormat = supportsPbf ? 'pbf' : 'json';
              // Only quantize lines and polygons
              this._quantizedQuery = (esriLayerConfig.supportsCoordinatesQuantization === true) && (esriLayerConfig.geometryType === 'esriGeometryPolygon' ||
                  esriLayerConfig.geometryType === 'esriGeometryPolyline');
              if (esriLayerConfig.fields) {
                  this._sortableFields = (esriLayerConfig.fields)
                      .filter(field => ([
                      'esriFieldTypeString', 'esriFieldTypeDouble', 'esriFieldTypeDate', 'esriFieldTypeGUID',
                      'esriFieldTypeGlobalID', 'esriFieldTypeInteger', 'esriFieldTypeOID', 'esriFieldTypeSingle',
                      'esriFieldTypeSmallInteger'
                  ].indexOf(field.type) > -1) &&
                      field.name.indexOf('()') === -1 &&
                      (field.alias || '').indexOf('()') === -1)
                      .map(field => field.name);
              }
              if (esriLayerConfig.indexes) {
                  this.promoteId = esriLayerConfig.indexes
                      .filter((index) => (index.isUnique === true) &&
                      index.fields &&
                      this._sortableFields.indexOf(index.fields) > -1)
                      .map((index) => index['fields'])[0];
              }
              if (esriLayerConfig.fields) {
                  this._primaryKeyType = esriLayerConfig.fields
                      .filter((f) => f.name === this.promoteId)
                      .map((f) => [
                      'esriFieldTypeDouble', 'esriFieldTypeDate', 'esriFieldTypeGUID',
                      'esriFieldTypeGlobalID', 'esriFieldTypeInteger', 'esriFieldTypeOID', 'esriFieldTypeSingle',
                      'esriFieldTypeSmallInteger'
                  ].indexOf(f.type) > -1 ? 'number' : 'string')[0];
              }
              // Set the record count to the smaller of the two values (either the server max record count, or the defined one)
              this._originalSource.resultRecordCount = (this._originalSource.resultRecordCount || Infinity) < maxRecordCount ? this._originalSource.resultRecordCount : maxRecordCount;
              // Start with blank data
              this.setData({
                  "type": "FeatureCollection",
                  "features": []
              });
              this._events.on('data', (esriData) => this.drawMapData(esriData.json, esriData.zoom));
              this.loadMapData(map);
              // Don't load the map if we're not trying to request one (liveLayer)
              map.on('moveend', () => this._liveLayer && this._waitEvent('redrawMap', 100));
              this._events.on('redrawMap', () => this.loadMapData(map));
          }
          ;
          loadTile(tile, callback) {
              if (!this._liveLayer) {
                  this._liveLayer = true; // This makes sure we're only loading the layer if its tiles are requested
                  this._waitEvent('redrawMap', 1000);
              }
              super.loadTile(tile, callback);
          }
          async loadMapData(map, bounds) {
              map = map === undefined ? this.map : map;
              if (map === undefined)
                  throw new Error('Source Data (Source ID: ' + this.id + ') could not be loaded');
              console.log('LOADING');
              // Don't load the map if we're not trying to request one (liveLayer)
              //if (!this._liveLayer) return;
              // Get list of all geometries at this or a higher zoom, if it doesn't support quantization, set to max zoom
              const displayZoom = this._quantizedQuery ? Math.floor(this.map.getZoom()) : this.map.getMaxZoom();
              // Create the ArcGIS Request
              let where = this._originalSource.where;
              // Build the request object
              const request = {
                  where
              };
              // If there is a primary key, make sure we don't download it again
              if (this.promoteId) {
                  bounds = bounds || [map.getBounds().getWest(), map.getBounds().getSouth(), map.getBounds().getEast(), map.getBounds().getNorth()];
                  const projectedSouthWest = fromWGS84(bounds[0], bounds[1]);
                  const projectedNorthEast = fromWGS84(bounds[2], bounds[3]);
                  const projectedBounds = [projectedSouthWest.x, projectedSouthWest.y, projectedNorthEast.x, projectedNorthEast.y];
                  const alreadyLoadedKeys = await this._geometriesAtZoom.exec('getKeysAtZoom')(displayZoom);
                  request.geometry = projectedBounds.join(',');
                  request.geometryType = 'esriGeometryEnvelope';
                  request.inSR = '3857';
                  const wrap = (v) => this._primaryKeyType === 'string' ? `'${v}'` : v;
                  if (alreadyLoadedKeys.length) {
                      request.where = `(${where}) AND "${this.promoteId}" NOT IN (${alreadyLoadedKeys.map(k => wrap(k)).join(',')})`;
                  }
              }
              // Cancel all over requests
              this._requests.forEach(fn => fn.cancel());
              //const newEsriJson = await 
              this._queryFeatures(this._originalSource.url, request, 0, (cancel) => this._requests.push(cancel), map, displayZoom);
              this._liveLayer = false; // We won't draw the layer again until another tile it requested
          }
          async drawMapData(newEsriJson, displayZoom) {
              // Convert to GeoJSON Features
              const newFeatures = this._esriJsonToFeatures(newEsriJson);
              // Run the diff
              const ids = newFeatures.map(feature => feature.properties[this.promoteId]);
              const updatedIds = await (this._geometriesAtZoom.exec('updateKeysAtZoom')(displayZoom, ids));
              const dataDiff = {
                  add: updatedIds.map((updatedId, idx) => {
                      if (updatedId === 'added') {
                          return newFeatures[idx];
                      }
                  }).filter(idx => idx !== undefined),
                  update: updatedIds.map((updatedId, idx) => {
                      if (updatedId === 'updated') {
                          const geom = newFeatures[idx].geometry;
                          return {
                              id: ids[idx],
                              newGeometry: newFeatures[idx].geometry
                          };
                      }
                  }).filter(idx => idx !== undefined)
              };
              if (dataDiff.update.length || dataDiff.add.length) {
                  if (this.updateData && false) {
                      // TODO Maplibre version 3!
                      // This is untested, so don't enable it!
                      this.updateData(dataDiff);
                  }
                  else {
                      // Update the _data in place
                      const currentFeatures = this._data.features;
                      const currentFeaturesIds = currentFeatures.map(feature => feature.properties[this.promoteId]);
                      // these functions were tested on on jsbench.me, and for loops are the fastest
                      for (let i = 0; i < dataDiff.update.length; i++) {
                          let featureIdx = currentFeaturesIds.indexOf(dataDiff.update[i].id);
                          if (featureIdx > -1) {
                              currentFeatures[featureIdx].geometry = dataDiff.update[i].newGeometry;
                          }
                      }
                      ;
                      for (let i = 0; i < dataDiff.add.length; i++) {
                          currentFeatures.push(dataDiff.add[i]);
                      }
                      this.setData(this._data);
                  }
              }
          }
          async _queryFeatures(url, options, offset, cancel, map, zoom) {
              map = map === undefined ? this.map : map;
              if (map === undefined)
                  throw new Error('Source Data (Source ID: ' + this.id + ') could not be loaded');
              // Convert the out field array to a string
              const outFieldsString = Array.isArray(this._originalSource.outfields) ?
                  this._originalSource.outfields.map(f => `"${f}"`).join(',') :
                  '*';
              const quantizationSting = this._quantizedQuery ?
                  JSON.stringify(quantizationParameters(zoom, this.tileSize)) :
                  '';
              // Define the full query parameters
              const queryParams = {
                  'where': this._options.where,
                  'spatialRel': 'esriSpatialRelIntersects',
                  'outFields': outFieldsString,
                  'returnGeometry': true,
                  'returnTrueCurves': false,
                  // If the data is quantized, quantize it to 3857, otherwise just use 4326
                  // the PBF format is always quantized (even if the coordinates quantization isn't supported)
                  'outSR': (this._quantizedQuery || this._requestFormat === 'pbf') ? '3857' : '4326',
                  'returnIdsOnly': false,
                  'returnCountOnly': false,
                  'returnZ': false,
                  'returnM': false,
                  'returnDistinctValues': false,
                  'returnExtentOnly': false,
                  'featureEncoding': 'esriDefault',
                  'orderByFields': this._sortableFields.map(v => `"${v}"`).join(','),
                  'resultOffset': offset !== undefined ? offset : 0,
                  'resultRecordCount': this._originalSource.resultRecordCount,
                  'quantizationParameters': quantizationSting,
                  //'token': this.token, // TODO
                  'f': this._requestFormat,
                  ...options
              };
              const mapFetch = new MapFetch(map);
              const tmpUrl = new URL(url);
              Object.keys(queryParams)
                  .map(key => tmpUrl.searchParams.append(key, queryParams[key].toString()));
              const dataPromise = mapFetch.fetch(url + '/query', {
                  'body': tmpUrl.search.replace(/^\?/, ''),
                  //'method': 'POST', // Automatically decide based on URL length (GETs have better caching)
                  'headers': {
                      'content-type': 'application/x-www-form-urlencoded'
                  },
              }, (cancelFunction) => cancel && cancel(cancelFunction));
              const arcgisRequest = await (await dataPromise);
              let data = { 'features': [], 'exceededTransferLimit': false };
              try {
                  if (queryParams.f === 'pbf') {
                      const pbfData = await arcgisRequest.arrayBuffer();
                      const convertPbfWorker = createActor('ConvertPbf', [pbfData]);
                      //const convertPbf = new ConvertPbf(pbfData);
                      data = await convertPbfWorker.exec('convert')();
                  }
                  else {
                      data = await arcgisRequest.json();
                      if (this._quantizedQuery) {
                          // Dezigzag simplified data
                          const dezigzagWorker = createActor('DeZigZagJSON', [
                              data.features,
                              data.transform,
                              data.geometryType
                          ]);
                          const features = await dezigzagWorker.exec('convert')();
                          data.spatialReference = { 'wkid': 4326 };
                          data.features = features;
                      }
                  }
              }
              catch (e) {
                  // There was an error with the request, it was probably cancelled
                  if (e !== 'cancel') {
                      console.error('Error with request', e);
                  }
                  return;
              }
              // Update the data
              if (data && data.features.length) {
                  this._events.fire('data', {
                      'json': data,
                      'zoom': zoom
                  });
              }
              if (data.exceededTransferLimit === true) {
                  this._queryFeatures(url, options, (offset || 0) + data.features.length, cancel, map, zoom);
              }
          }
          _esriJsonToFeatures(esriJson) {
              const supportedGeometryTypes = {
                  'esriGeometryPoint': 'Point',
                  'esriGeometryMultipoint': 'MultiPoint',
                  'esriGeometryLine': 'LineString',
                  'esriGeometryPolyline': 'MultiLineString',
                  'esriGeometryPolygon': 'MultiPolygon'
              };
              if (Object.keys(supportedGeometryTypes).indexOf(esriJson.geometryType) === -1) {
                  throw new Error('Geometry ' + esriJson.geometryType + ' not supported');
              }
              // Convert Features
              const features = esriJson.features.map(feature => {
                  // TODO reproject? data should already be 4326 by this point
                  if ((esriJson.spatialReference.latestWkid || esriJson.spatialReference.wkid) !== 4326) {
                      console.warn('Unspported Projection (' + (esriJson.spatialReference.latestWkid || esriJson.spatialReference.wkid) + '), some data may not display correctly');
                  }
                  return {
                      'type': 'Feature',
                      'properties': feature.attributes,
                      'geometry': arcgisToGeoJSON(feature.geometry)
                  };
              });
              return features;
          }
          _waitEvent(name, waitTime = 100) {
              // Uses listeners are a debouncer
              console.log('Called', name, waitTime);
              this._waitTimes[name] = (this._waitTimes[name] || 0) + waitTime;
              setTimeout(() => {
                  if (this._waitTimes[name] !== undefined) {
                      this._waitTimes[name] = this._waitTimes[name] - waitTime;
                      if (this._waitTimes[name] <= 0) {
                          this._waitTimes[name] = 0; // Reset the time to 0
                          this._events.fire(name);
                      }
                  }
              }, waitTime);
          }
      };
  }
  ;

  return ArcGisRestSource;

}));
//# sourceMappingURL=maplibre-gl-arcgis-rest-source.min.js.map
