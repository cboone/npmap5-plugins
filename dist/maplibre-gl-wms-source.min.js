(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.WmsSource = factory());
})(this, (function () { 'use strict';

  const WmsSourceDefaults = {
      transparent: true,
      tileSize: 256
  };
  function WmsSource(mapLibrary) {
      return class WmsSource extends mapLibrary['RasterTileSource'] {
          constructor(id, originalSource, dispatcher, eventedParent) {
              super(id, { 'type': 'raster' }, dispatcher, eventedParent);
              // Set the defaults
              this.id = id;
              this._originalSource = { ...WmsSourceDefaults, ...originalSource };
          }
          load() {
              this.convertToSource().then(convertedSource => {
                  this.type = 'raster';
                  this.url = convertedSource.url; //
                  this.tiles = convertedSource.tiles; //?: string[] | undefined;
                  this.bounds = convertedSource.bounds; //?: [number, number, number, number] | undefined;
                  this.scheme = convertedSource.scheme; //?: "xyz" | "tms" | undefined;
                  this.minzoom = convertedSource.minzoom; //?: number | undefined;
                  this.maxzoom = convertedSource.maxzoom; //?: number | undefined;
                  super.load();
              });
          }
          async convertToSource() {
              var _a, _b;
              const url = new URL(`${this._originalSource.url}`);
              url.searchParams.append('request', 'GetCapabilities');
              url.searchParams.append('service', 'WMS');
              let wmsCapabilities;
              try {
                  const response = await fetch(url);
                  const text = await response.text();
                  wmsCapabilities = new window.DOMParser().parseFromString(text, "text/xml");
              }
              catch (e) {
                  throw new Error('Cannot get WMS Capabilities');
              }
              const imageFormats = [...(wmsCapabilities.getElementsByTagName('GetMap')[0].children)]
                  .filter(c => c.tagName === 'Format')
                  .map(c => c.textContent);
              var wmsVersion;
              try { // try for WMS version 1.3.0
                  wmsVersion = wmsCapabilities.getElementsByTagName('WMS_Capabilities')[0].getAttribute('version');
              }
              catch (e) { // else for WMS version 1.3.0
                  wmsVersion = wmsCapabilities.getElementsByTagName('WMT_MS_Capabilities')[0].getAttribute('version');
              }
              console.log('Image Formats', imageFormats, 'version', wmsVersion);
              window.cap = wmsCapabilities;
              const wmsQuery = {
                  'layers': this._originalSource.layers.join(','),
                  'format': this._originalSource.format.toString(),
                  'height': (_a = this._originalSource.tileSize) === null || _a === void 0 ? void 0 : _a.toString(),
                  'width': (_b = this._originalSource.tileSize) === null || _b === void 0 ? void 0 : _b.toString(),
                  'service': 'WMS',
                  'request': 'GetMap',
                  'transparent': this._originalSource.transparent,
                  'styles': '' // TODO
              };
              if (wmsVersion === '1.3.0') {
                  wmsQuery.version = '1.3.0';
                  wmsQuery.crs = 'EPSG:3857';
              }
              else {
                  wmsQuery.version = '1.1.1';
                  wmsQuery.srs = 'EPSG:3857';
              }
              const tileUrl = new URL(`${this._originalSource.url}`);
              Object.keys(wmsQuery).map(key => {
                  tileUrl.searchParams.append(key, wmsQuery[key]);
              });
              let maplibrarySource = {
                  ...this._originalSource,
                  ...{
                      'type': 'raster',
                      'tiles': [tileUrl.toString() + '&bbox={bbox-epsg-3857}']
                  }
              };
              return maplibrarySource;
          }
      };
  }
  ;

  return WmsSource;

}));
//# sourceMappingURL=maplibre-gl-wms-source.min.js.map
